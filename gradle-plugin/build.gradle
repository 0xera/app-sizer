/*
 * MIT License
 *
 * Copyright (c) 2024.  Grabtaxi Holdings Pte Ltd (GRAB), All rights reserved.
 *
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE
 */

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/custom_plugins.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id "com.grab.sizer.kotlin"
    id 'java-gradle-plugin'
    alias(libs.plugins.kotlin.dsl)
    alias(libs.plugins.gradle.plugin.publish)
    id 'maven-publish'
    id 'signing'
}

group = 'com.grab.sizer'
version = '1.0.0-SNAPSHOT'

dependencies {
    compileOnly libs.android.gradle.plugin
    compileOnly libs.android.gradle.api

    implementation project(':app-sizer')
    implementation libs.google.dagger
    implementation libs.gson
    kapt libs.dagger.compiler

    testImplementation libs.junit
    testImplementation gradleTestKit()
    testImplementation libs.android.gradle.plugin
    testImplementation libs.android.gradle.api
}

java {
    withJavadocJar()
    withSourcesJar()
}

gradlePlugin {
    website = 'https://grab.github.io/app-sizer/'
    vcsUrl = 'https://github.com/grab/app-sizer.git'

    plugins {
        appSizerPlugin {
            id = 'com.grab.sizer'
            implementationClass = 'com.grab.plugin.sizer.AppSizerPlugin'
            displayName = 'App Sizer Plugin'
            description = 'A tool designed to analyze the download size of Android applications'
            tags.set(['android', 'size', 'analysis', 'app-size'])
        }
    }
}

def configurePom(pom) {
    pom.with {
        name = 'App Sizer'
        description = 'A tool designed to analyze the download size of Android applications'
        url = 'https://github.com/grab/app-sizer'

        licenses {
            license {
                name = 'MIT License'
                url = 'https://opensource.org/licenses/MIT'
                distribution = 'repo'
            }
        }

        developers {
            developer {
                id = 'grab'
                name = 'Grab Engineers'
                email = 'van.minh@grab.com'
                organization = 'Grab'
                organizationUrl = 'https://github.com/grab'
            }
        }

        scm {
            connection = 'scm:git:git://github.com/grab/app-sizer.git'
            developerConnection = 'scm:git:ssh://github.com:grab/app-sizer.git'
            url = 'https://github.com/grab/app-sizer'
        }
    }
}

publishing {
    publications.withType(MavenPublication).configureEach { publication ->
        if (publication.name == 'pluginMaven') {
            publication.artifactId = 'sizer-gradle-plugin'  // Set the artifact ID
        }
        configurePom(publication.pom)
    }

    repositories {
        maven {
            name = 'sonatype'
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = findProperty('ossrhUsername') ?: System.getenv('OSSRH_USERNAME')
                password = findProperty('ossrhPassword') ?: System.getenv('OSSRH_PASSWORD')
            }
        }
    }
}

signing {
    def signingKey = findProperty('signingKey') ?: System.getenv('GPG_PRIVATE_KEY')
    def signingPassword = findProperty('signingPassword') ?: System.getenv('GPG_PASSPHRASE')

    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications
}

// Fixed task ordering
tasks.withType(AbstractPublishToMaven).configureEach { publishTask ->
    publishTask.mustRunAfter(tasks.withType(Sign))
}

tasks.withType(Sign).configureEach { signTask ->
    signTask.onlyIf { !version.endsWith('SNAPSHOT') }
    tasks.withType(AbstractPublishToMaven).forEach {
        it.dependsOn(signTask)
    }
}

tasks.register('publishAll') {
    group = 'publishing'
    description = 'Publishes all publications to all repositories'
    dependsOn(tasks.withType(AbstractPublishToMaven))
}