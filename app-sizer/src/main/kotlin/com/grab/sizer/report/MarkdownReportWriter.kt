/*
 * MIT License
 *
 * Copyright (c) 2024.  Grabtaxi Holdings Pte Ltd (GRAB), All rights reserved.
 *
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE
 */

package com.grab.sizer.report

import java.io.File
import java.util.*
import javax.inject.Inject
import javax.inject.Named

private const val KILO_BYTE = 1024L
private const val MEGA_BYTE = 1024L * 1024L

internal const val NAMED_OUTPUT_DIR = "output_dir"

class MarkdownReportWriter @Inject constructor(
    @Named(NAMED_OUTPUT_DIR) private val outputDirectory: File,
    private val projectInfo: ProjectInfo,
) : ReportWriter {
    override fun write(report: Report) {
        File(File(outputDirectory, projectInfo.deviceName), "${report.id}-report.md").apply {
            initOutPutFile()
            writeText(
                MarkdownTable(report.createHeader()).apply {
                    report.rows.sortedBy { it.size() }.forEach { row ->
                        addRow(row.toMarkDown())
                    }
                }.generate()
            )
        }
    }

    private fun Row.toMarkDown(): List<String> {
        return fields.map { field ->
            when (field.value) {
                is Long -> (field.value as Long).reportSize()
                else -> field.value.toString()
            }
        }
    }

    private fun Report.createHeader(): List<String> {
        return rows.firstOrNull()
            ?.fields
            ?.map { field ->
                field.name.replaceFirstChar {
                    if (it.isLowerCase()) it.titlecase(Locale.getDefault()) else it.toString()
                }
            } ?: emptyList()
    }

    private fun File.initOutPutFile() {
        if (!exists()) {
            if (!parentFile.exists())
                parentFile.mkdirs()
            createNewFile()
        }
    }

    private fun Row.size(): Long = fields.find { it.name == "size" }?.value as Long
}

internal fun Long.reportSize(): String = when {
    this < KILO_BYTE -> "$this bytes"
    this < MEGA_BYTE -> "%.3f KB".format(this.toDouble() / KILO_BYTE)
    else -> "%.3f MB".format(this.toDouble() / MEGA_BYTE)
}

/**
 * A simple class to generate mark-down table
 * It was generated by Chatgpt
 */
class MarkdownTable(private val headers: List<String>) {
    private val rows: MutableList<List<String>> = mutableListOf()

    fun addRow(row: List<String>) {
        require(row.size == headers.size) { "Row has different number of columns compared to headers. $headers vs $row" }
        rows.add(row)
    }

    fun generate(): String {
        val sb = StringBuilder()
        sb.append("| ")
        headers.forEach { header ->
            sb.append(header)
            sb.append(" | ")
        }
        sb.append("\n| ")
        repeat(headers.size) { sb.append("--- | ") }
        rows.forEach { row ->
            sb.append("\n| ")
            row.forEach { item ->
                sb.append(item)
                sb.append(" | ")
            }
        }
        return sb.toString()
    }
}